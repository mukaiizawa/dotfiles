食べチョク開発者ブログ「仕事を任せられるエンジニアになるために意識してほしいこと」抜粋、要約

# 正確な作業の見積もり
正確な見積もりができないということは、作業内容を正しく理解できていない、技術的な困難性を理解していない、不確定要素を洗い出せていない、そして自分たちのスキルを正しく理解していないということである。

# 進捗を正確に報告する
遅れそうならば、遅れる旨を伝える。もうすぐできますと言って根性でなんとかするのはやめる。

できないのならばできないと言う。

# 言われたことだけをしない
「詳細設計書にはこう書いてあったから、変だと思いましたがそのとおりに作りました。」という人がたまにいる。自分で考えて行動し、変だと思ったらちゃんと報告する。

# わからなかったら相談する
わからないまま何日も考えて全くタスクが進んでいなかったということがあってはならない。考えても無理そうな問題は相談する。その際、何が問題となっているか整理してから相談すること。

# 成果物をすぐ見せる
方針が間違っていないかを確認するためにも、すぐに成果物を見せる。

# 作った機能に責任を持つ
自分が作った機能は自分が最後まで面倒を見ること。

# 技術に責任を持つ
新しい技術を採用するとき、なんとなく流行っているから、自分がやってみたいからだけで採用してはならない。自分が一番のプロフェッショナルになるつもりで採用すること。

# スピードとクオリティのバランスを考える
フェーズや開発箇所によって開発スピードが求められる場合と、クオリティが求められる場合がある。

お金を扱う機能、契約を扱う機能など、正確性が求められるプログラムは開発スピードを落としてクオリティを上げることに神経を使うこと。

逆に管理画面とか、不具合がでても大勢に影響がない機能はスピード重視で機能開発することも大事である。

# 作る機能に興味を持つ
これから作るものに興味・関心を持つこと。

ここはどうなってるんだろうとか、こういうパターンだとどうなるんだろう、実際に業務で使うときはどういう使われ方をするんだろうとか、想像して機能を作ること。

興味もなくとりあえず動けばいいやという考えで実装してはならない。

# 優先順位を理解する
自分がやりたいタスクから着手ではなく、優先順位が高いものから着手すること。

# 一日の集中力には限度があることを理解する
エンジニアが一日に集中できる時間には限界がある。

システム開発は神経を使う作業である。ダラダラ長いあいだ仕事していても非効率である。

# 何事も効率化する
同じ作業を何度も繰り返している場合、何が効率化できるか考えること。エンジニアは作業を効率化する職業である。

# システムの完成度が上がるほど作業効率が悪くなることを理解する
一般にシステムの完成度が上がると次のような理由で作業効率が下がる。９割完成しているからと言って、油断してはならない。

- 仕様変更時の影響箇所の増加
- リファクタリングの頻度、箇所の増加
- デグレードする可能性の増加
- 他の実装との一貫性、整合性等を保つことによる実装難易度の増加

# 会議は人の時間を奪うということを理解する
何の考えも無しにとりあえず会議を開催するのはやめる。

会議を開く場合は目的をはっきりさせ、必要な人だけを呼ぶこと。

会議の時間は時間を短くすること。長時間の会議は集中力も続かず非効率である。

# 将来の事を考える
その場しのぎの機能を作ってはならない。新しい機能を作るときは、将来どういう拡張がされるのか、どういう機能になるか想像すること。

一度動き出したシステムを変えるのは容易ではない。

# 影響範囲を理解する
新しい機能を足す、あるいは既存の機能を改修するとき、どの機能にどういう影響があるのか、影響範囲を必ず洗い出すようにすること。

#  保守にも手間がかかる事を理解する
新しい機能を何も考えなしに追加しないようにすること。作って動き出した機能の面倒をみるのも、コストがかかる。

優れたシステムほど、驚くほど機能がシンプルである。条件分岐が多いシステムは品質が下がり、開発、保守、テスト工数が指数関数的に増加する。パターンを増やさない努力をすること。

# 異常系に目を向ける
正常系よりも異常系の設計をする方が難しい。異常系にどれだけ対処できるのか、設計できるのかがエンジニアの技術レベルの違いである。

# テストの仕方を理解する
テスト設計ができないと、品質の高いシステム設計できない。

正しい要因（水準・因子）を洗い出し、組み合わせを考え、さまざまなパターンを想定すること。

# 顧客の言っている言葉を鵜呑みにしてはならない
顧客の提案通りに作る必要があるかは自分で考えること。言われたとおりに作っても、多くの場合良いシステムはできない。

# ログをよく見る
開発時にログを全く見てない人がいる。見ればエラーだとわかるし、パフォーマンス問題も見つけられる。

# 割れた窓を直す努力をする
割れた窓を放置してはならない。

# デバッグ力を上げる
プログラムのデバッグができるようになること。バグが発生したら、なぜそのバグが起きたのだろうかとすぐ想像できる力を身に着けること。

# 見直しをすること
自分の行った作業を見直すこと。
