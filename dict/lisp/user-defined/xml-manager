
Library XML-MANAGER

Variable *indent*
set nil to disable indent
default value is t

Variable *single-tag*
list of single tag.
this list be used to check element that single-tag or not.

Structure xml-node
type---a symbol. element, document-type or comment.
name---a string. used to element node.
value---a string. used to document-type node, comment node.
attrs---a alist. used to element node.
children---a xml-node list.
single?---a boolean.

Macro defnode, defnodes
defnode namespace names
defnodes namespaces node-names mapping-names
namespace---a string.
name---a string.
mapping-name---a keyword. (to use macro name of DLS)
single-tag---a string.

Function get-node-name-mapping, set-node-name-mapping
get-node-name-mapping name &optional namespace => mapping-name
set-node-name-mapping name &optional namespace => nil

Function DSL->xml, xml->DSL
DSL->xml xml => string
xml->DSL xml-nodes => string
see at example.

Example:
;; define macro :foobar.
(defelement "foo" "bar" :foobar)
=> #S(XML-NODE :TYPE ELEMENT :NAME "foo:bar" :VALUE "" :ATTRS NIL :CHILDREN NIL :SINGLE? NIL)

;; convert from DSL to xml
(DSL->xml
  (:foobar ((key1 "val1") (key2 "val2"))
    "text-node"))
=>  <foo:bar key1="val1" key2="val2">
      text-node
    </foo:bar>

;; sample DSL
(defparameter dom
  (:html ((lang "ja"))
    (:head
      (:meta ((charset "utf-8")))
      (:title "Page Title"))
    (:body
      (:table ((border 0) (cellpadding 10))
        (loop for i from 0 to 3 collect
              (:tr ((align "right"))
                (loop for j from 0 to 3 collect
                      (:td ((bgcolor (if (oddp (1+ j)) "#FF0000" "#FF00FF")))
                        (format nil "~@R" (+ (* 5 i) (1+ j)))))))))))
(princ (DSL->xml dom))

(defparameter dom
  (loop for (link . title) in '(("http://zappa.com/" . "Frank Zappa")
                                ("http://marcusmiller.com/" . "Marcus Miller")
                                ("http://www.milesdavis.com/" . "Miles Davis"))
        collect
        (:a ((href link))
          (:b title)
          (:br))))
(princ (DSL->xml dom))

(defparameter dom
  (cons (:h4 "Look at the character entities generated by this example")
        (loop for i from 0
              for str in '("text-node1" "text-node2" "text-node3" "text-node4" "text-node5")
              collect (:p ((style (mkstr "background-color:" (case (mod i 3)
                                                               ((0) "red")
                                                               ((1) "orange")
                                                               ((2) "blue")))))
                        str))))
(princ (DSL->xml dom))

;; convert from xml to DSL
(xml->DSL
  "
  <!DOCTYPE html>
  <html>
  <meta charset='utf-8'>
  <head>
  <link href='css/common.css' rel='stylesheet' media='screen' />
  </head>
  <body>
  <p>
  <img src='img/image.png' />
  </p>
  <a href='index.html'>go home</a>
  </body>
  </html>")
=> (:!DOCTYPE "html")
   (:html ()
     (:meta ((charset "utf-8")))
     (:head ()
       (:link ((href "css/common.css") (rel "stylesheet") (media "screen"))))
     (:body ()
       (:p ()
         (:img ((src "img/image.png"))))
       (:a ((href "index.html"))
         "go home")))

