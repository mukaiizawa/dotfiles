Library REGEX

Structure regex
key---a symbol. (grouping, selection, character, start, end, dot)
pat---a object.
closure?---a closure.

Function match?, match?->string, match?->replace
match? pat line &key (start 0) => (list start end)
match?->string pat line &key (start 0) => match-string
match?->replace pat replace-to line &key (start 0) => string-after-substitution
match? try match or not regex. if match, return list (start-positon end-position).
match?->replace and match?->string is like match? but

Function DSL->xml, xml->DSL
DSL->xml xml => string
xml->DSL xml-nodes => string
see at example.

Example:
;; define macro :foobar.
(defelement "foo" "bar" :foobar)
=> #S(XML-NODE :TYPE ELEMENT :NAME "foo:bar" :VALUE "" :ATTRS NIL :CHILDREN NIL :SINGLE? NIL)

;; convert from DSL to xml
(DSL->xml
  (:foobar ((key1 "val1") (key2 "val2"))
    "text-node"))
=>  <foo:bar key1="val1" key2="val2">
      text-node
    </foo:bar>

;; sample DSL
(defparameter dom
  (:html ((lang "ja"))
    (:head
      (:meta ((charset "utf-8")))
      (:title "Page Title"))
    (:body
      (:table ((border 0) (cellpadding 10))
        (loop for i from 0 to 3 collect
              (:tr ((align "right"))
                (loop for j from 0 to 3 collect
                      (:td ((bgcolor (if (oddp (1+ j)) "#FF0000" "#FF00FF")))
                        (format nil "~@R" (+ (* 5 i) (1+ j)))))))))))
(princ (DSL->xml dom))

(defparameter dom
  (loop for (link . title) in '(("http://zappa.com/" . "Frank Zappa")
                                ("http://marcusmiller.com/" . "Marcus Miller")
                                ("http://www.milesdavis.com/" . "Miles Davis"))
        collect
        (:a ((href link))
          (:b title)
          (:br))))
(princ (DSL->xml dom))

(defparameter dom
  (cons (:h4 "Look at the character entities generated by this example")
        (loop for i from 0
              for str in '("text-node1" "text-node2" "text-node3" "text-node4" "text-node5")
              collect (:p ((style (mkstr "background-color:" (case (mod i 3)
                                                               ((0) "red")
                                                               ((1) "orange")
                                                               ((2) "blue")))))
                        str))))
(princ (DSL->xml dom))

;; convert from xml to DSL
(xml->DSL
  "
  <!DOCTYPE html>
  <html>
  <meta charset='utf-8'>
  <head>
  <link href='css/common.css' rel='stylesheet' media='screen' />
  </head>
  <body>
  <p>
  <img src='img/image.png' />
  </p>
  <a href='index.html'>go home</a>
  </body>
  </html>")
=> (:!DOCTYPE "html")
   (:html ()
     (:meta ((charset "utf-8")))
     (:head ()
       (:link ((href "css/common.css") (rel "stylesheet") (media "screen"))))
     (:body ()
       (:p ()
         (:img ((src "img/image.png"))))
       (:a ((href "index.html"))
         "go home")))

