 Function MKSTR {{{

 Syntax:
 mkstr &rest objects => string

 Arguments and Values:
 object---an object.
 string---a string.

 Description:
 The mkstr function takes any number of arguments and concatenates their printed
 representatios into a string

 Examples:
 (mkstr pi " pieces of " 'Pi)
 => "3.141592653589793 pieces of PI"

 See Also:
 mksym

}}}
Function MKSYM {{{

Syntax:
mksym &rest objects => symbol

Arguments and Values:
object---an object.
symbol---a symbol.

Description:
The mksym function takes one or more arguments and returns the symbol.
(creating one if necessary)
Whose print-name is their concatenation.
It can take as an argument any object which has a
printable representation: symbols, strings, numbers, even lists.

Examples:
(mksym 'ar "Madi" #\L #\L 0)
=> |ARMadiLL0|

See Also:
mkstr

}}}
Function MKKEY {{{

Syntax:
mksym &rest objects => keyword

Arguments and Values:
object---an object.
symbol---a keyword.

Description:
The mksym function takes one or more arguments and returns the keyword.
(creating one if necessary)
Whose print-name is their concatenation.
It can take as an argument any object which has a
printable representation: symbols, strings, numbers, even lists.

Examples:
(mkkey 'key "w" 0 #\r #\d)
=> :|KEYw0rd|

See Also:
mksym

}}}
Function CANONICAL-LETARGS {{{

Syntax:
canonical-letargs list => canonical-list

Arguments and Values:
list---a list.
canonical-list---list for let's bindding form.

Description:
The canonical-letargs function handles the case of a let form binding being
a single symbol.

Examples:
In the following, a is normalised to (a)
(canonical-letargs '(a (b) (c nil)))
=> ((A) (B) (C NIL))

Exceptional Situations:
Should signal an error of type type-error if list can't bind

Notes:
Doug Hoyte's Let Over Lambda
let-binding-transform

}}}
Function BEFORE {{{

Syntax:
before item sequence &key from-end test => subsequence

Arguments and Values:
item---an object.
sequence---a proper sequence.
from-end---a generalized boolean. The default is false.
test---a designator for a function of two arguments
       that returns a generalized boolean.

Description:
The before function create a sequence that is copy of sequence before item.

Examples:
(before #\s "asdfasdf")
=> "a"
(before #\s "asdfasdf" :from-end t)
=> "asdfa"

Side Effects:
None.

Affected By:
None.

Exceptional Situations:
Should signal an error of type type-error if sequence is not a proper sequence.

See Also:
after

Notes:
None.

}}}
Function AFTER {{{

Syntax:
after item sequence &key from-end test
=> subsequence

Arguments and Values:
item---an object.
sequence---a proper sequence.
from-end---a generalized boolean. The default is false.
test---a designator for a function of two arguments
       that returns a generalized boolean.

Description:
The function after create a sequence that is copy of sequence after item.

Examples:
(after #\s "asdf")
=> "df" 
(after 's '(a s d f a s d f))
=> (D F A S D F) 

Side Effects:
None.

Affected By:
None.

Exceptional Situations:
Should signal an error of type type-error if sequence is not a proper sequence.

See Also:
before

Notes:
None.

}}}
Function EMPTY? {{{

Syntax:
empty? string => generalized-boolean

Arguments and Values:
string--a string.
generalized-boolean---a generalized boolean.

Description:
The empty? function return true if string is empty.
otherwise, returns false.

Examples:
(empty? "something-string")
=> t
(empty? " ")
=> nil
(empty? nil)
=> t

Side Effects:
None.

Affected By:
None.

Exceptional Situations:
Should signal an error of type type-error if string is not a string.

See Also:
blank?

Notes:
None.

}}}
Function BLANK? {{{

Syntax:
blank? string => generalized-boolean

Arguments and Values:
string--a string.
generalized-boolean---a generalized boolean.

Description:
The blank? function returns true if string is empty.
otherwise, returns false.

Examples:
(blank? "something-string")
=> t
(blank? " ")
=> t

Side Effects:
None.

Affected By:
None.

Exceptional Situations:
Should signal an error of type type-error if string is not a string.

See Also:
empty?

Notes:
None.

}}}
