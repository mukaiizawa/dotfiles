
Interface Stream<K,V>

java.lang.Object
  java.util.stream

# 概要
java8で追加されたStreamのAPIを用いることにより、
streamを実装しているクラスを用いる際に従来のコードを簡略化できることがある。

# Streamの生成方法

## Listから生成
 new ArrayList<>()
 .stream();

##  配列から生成
Arrays
.stream(arr);

## Mapから生成
new HashMap<>()
.entrySet()
.stream();

## Streamクラスのofメソッドから作成
Stream.of("a", "b", "c")


# 中間操作

## ソート処理
### ソート順の反転
reversed()によりソートの逆順を指定できる。
stream
.sorted(Comparator.comparing(x -> x.getStr().length().reversed())
.collect(Collectors.toList());

### ソート条件の追加
thenComparing()によりソート条件を追加できる。
stream
.sorted(Comparator.comparing(x -> x.getStr().length())
    .thenComparing(x -> x.getStr2().length())
    .thenComparing(...)
    ...)
.collect(Collectors.toList());


## フィルタ処理
.filter()は写像後の値が真になるデータのみ抽出する。
例ではオブジェクトのlengthメソッドが5よりも大きいオブジェクトが抽出される。
stream
.filter(x -> x.length() > 5)
.collect(Collectors.toList());


# 終端操作

## コレクションの生成
### Listの生成
あるオブジェクトのリストからそのオブジェクトのプロパティのリストを生成する例を示す。
stream
.map(x -> x.getMember1())
.collect(Collectors.toList()));

### Mapの生成
あるオブジェクトのリストからメンバAをキーに、メンバBを値に持つマップを作成する例を示す。
stream
.collect(Collectors.toMap(x -> x.getA(), y -> y.getB()));


### グルーピング化してMapへ
streamの構成要素
あるオブジェクトのリストからオブジェクトのメンバの値でグルーピングした
マップを返す例を示す。
list // List<Structure> list
.stream()
.collect(Collectors.groupingBy(x -> x.getId()));


## 値の集約
### 畳み込み
<U> U reduce(U identity, BiFunction<U,? super T,U> accumulator, BinaryOperator<U> combiner)
Optional<T> reduce(BinaryOperator<T> accumulator)
reduceメソッドを用いて畳み込み処理が行える。
最初の引数はいわゆるLispにおける:initial-valueのような振る舞いをする。
stream
.reduce("", (x1, x2) -> x1 + "," + x2);
また、最初の引数を指定しない場合Optionalが返る。
その際、値の取得にはorElse(T)を使い事が多いのではないだろうか。
stream
.reduce((x1, x2) -> x1 + "," + x2)
.orElse("");

