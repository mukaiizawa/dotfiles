The Structure and Interpretation of Computer Programs

# licence
licenced under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License (CC BY-NC-SA).

# 序文

    コンピュータはバイオリンのようなものです。次のような場面を
    想像してみてください。ある初心者の人が、まず蓄音機を動かし
    てみて、それから次にバイオリンを触ってみます。その人は、バイ
    オリンの音はひどいと言います。人間主義者たちや多くの計算機
    科学者から私たちが聞く話はそういったものです。コンピュータ
    のプログラムは特定の目的にはよいが、柔軟ではないと。バイオ
    リンやタイプライターだってそんなものです。使い方を学ばなけ
    ればの話ですが。

# 手続きを用いた抽象化の構築

    Lisp がメインストリームの言語でないとしたら、なぜそれをプログラミン
    グの考察のための枠組みとして使うのでしょうか。それは、この言語が独特な
    特徴を持っているため、プログラミングの重要な構成とデータ構造について学
    び、それらを支える言語的特性と結びつけるのにとても便利な媒体だからです。
    これらの特性の中でも最も意義深いものは、プロセスのLisp による記述(これ
    は手続き(procedure) と呼ばれます) が、それ自身Lisp のデータとして表され、
    操作できるということです。これが重要なのは、“受動的な” データと“能動的
    な” プロセスという伝統的な区別を曖昧にする能力を使った強力なプログラム
    設計のテクニックが存在するからです。これから見ていくように、Lisp は手
    続きをデータとして扱う柔軟性のおかげで、これらのテクニックを探求するの
    に最も便利な言語のひとつになっています。手続きをデータとして表現する能
    力は、コンピュータ言語を支えるインタプリタやコンパイラのような、ほかの
    プログラムをデータとして操作しなければならないプログラムを書くのにも、
    Lisp をとても優れたものにしています。それに、こういったことを考えに入れ
    なくても、Lisp でのプログラミングは本当に楽しいのです。

