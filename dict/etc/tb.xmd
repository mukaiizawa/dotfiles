Technical Debt -- Ward Cunningham

# licence
[t-wadaのブログ](https://t-wada.hatenablog.jp/)
[creative commons](https://creativecommons.org/licenses/by/3.0/)

# 負債のメタファー
## メタファー
メタファー（比喩）が思考にどのような影響を与えるかについて興味を持つようになったのは、 George Lakoff と Mark Johnson による『Metaphors We Live By』（訳注: 邦訳は『レトリックと人生』）がきっかけです。その本から学んだのは、人間は自分の言語で使われているメタファーから類推して思考しているということです。

## 負債
負債（Debt）のメタファーを発明したのは、当時の自社プロダクト WyCash （訳注: 債権ポートフォリオ管理システム）で進めているリファクタリングについて上司に説明するためでした。 WyCash は Digitalk Smalltalk で開発して市場に投入したばかりのプロダクトで、そのとき私が重視していたのは、アプリケーションを開発していく過程で得られた学びを蓄積するためにプログラムに手を入れることでした。私たちはあたかも最初から何をすべきか知っていたかのように、そして Smalltalk ではそれがいとも簡単にできたかのようにプログラムに手を入れ続けていたのです。

上司に説明するとき、（WyCash が）金融系ソフトウェアだったので金融の例え話を使い、それを「負債のメタファー」と名付けました。どういうことかというと、「もしも自分たちが書いているプログラム（WyCash）を、金融の世界に関する正しい捉え方だと自分たちが理解した姿と一致させることができなくなれば、自分たちは絶えずその不一致につまずき続けることになり、開発スピードは遅くなっていくでしょう。それはまるで借金の利子を払い続けるかのようです」と説明したのです。

## スピード
借入をすれば物事をより早く前に進めることができるようになりますが、そのかわり返済し終えるまでは利子を払い続けることにもなります。私はお金を借りるのは良いアイデアだと、つまりソフトウェアを急いで世に出し、それによって学びを得るのは良いアイデアだと考えていました。次第に日常に戻ってきたら、もちろん借金を返済していくことになるでしょう。つまり、そのソフトウェアについての学びを深めるにつれてリファクタリングを行うことで、得られた経験をプログラムに反映していくのです。

## 負担
私は、ソフトウェアを急いで世に出して学びを得たにもかかわらず、その学びをプログラムに反映しない、つまり借金で言えば全く返済をしないケースが多々あると考えています。

当然ながら、借金を返済しないならば、クレジットカードに例えるなら次第にすべての収入が利子の返済に回されるようになり、購買力はゼロに近づいていきます。

同様に、長い間プログラムにただ機能を追加するのみで、それら機能に関して学んだ知識を反映する整理整頓を怠っていたならば、次第にプログラムからは知識が失われ、作業にかかる時間はひたすら長くなっていきます。言い換えるなら、すべて利子で食い潰され、進捗はゼロに近づいていくでしょう。

## アジリティ
多くのブロガーが負債のメタファーのことを、後できれいに書き直すつもりなら雑なコードを書いてもいいという考え方と混同し、かつその考え方こそが負債の原因であると説明しています。

私は雑なコードを書くことには全く賛成しませんが、たとえ理解が不完全だとしても、目の前の問題に対する現時点での理解を反映するコードを書くことには賛成です。

理解が不完全な段階でもソフトウェアを開発して借入をできるようになりたいならば、そのソフトウェアに現時点での理解を可能な限り反映させることが重要です。そうしておけば、いざリファクタリングをするときが来たなら、コードには当時何を考えていたかが明快に残っているので、現在の理解に合わせてリファクタリングするのも容易になります。

言い換えるなら、負債のメタファーで大事なのは返済してメタファーを味方につける力であり、それは問題を理解するに従ってリファクタリングしていけるような、十分にきれいなコードを書いているかどうかで決まるのです。

筋の良い方法論であり、XP（エクストリームプログラミング）の核心であるとも思います。数ある説明の中でも負債のメタファーは、XPがなぜ機能するのかをうまく説明しています。
